// <auto-generated />
using System;
using MathApi.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MathApi.Migrations
{
    [DbContext(typeof(MathDbContext))]
    [Migration("20230914181641_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MathApi.Models.Axiom", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Remarks")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Axioms");
                });

            modelBuilder.Entity("MathApi.Models.AxiomProposition", b =>
                {
                    b.Property<long>("AxiomId")
                        .HasColumnType("bigint");

                    b.Property<long>("SerialNo")
                        .HasColumnType("bigint");

                    b.Property<long>("FormulaId")
                        .HasColumnType("bigint");

                    b.Property<string>("Meaning")
                        .HasColumnType("longtext");

                    b.HasKey("AxiomId", "SerialNo");

                    b.HasIndex("FormulaId");

                    b.ToTable("AxiomPropositions");
                });

            modelBuilder.Entity("MathApi.Models.Formula", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Meaning")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Formulas");
                });

            modelBuilder.Entity("MathApi.Models.FormulaChain", b =>
                {
                    b.Property<long>("FormulaId")
                        .HasColumnType("bigint");

                    b.Property<long>("SerialNo")
                        .HasColumnType("bigint");

                    b.Property<long>("FromFormulaStringSerialNo")
                        .HasColumnType("bigint");

                    b.Property<long>("ToFormulaStringSerialNo")
                        .HasColumnType("bigint");

                    b.HasKey("FormulaId", "SerialNo");

                    b.HasIndex("FormulaId", "FromFormulaStringSerialNo");

                    b.HasIndex("FormulaId", "ToFormulaStringSerialNo")
                        .IsUnique();

                    b.ToTable("FormulaChains");
                });

            modelBuilder.Entity("MathApi.Models.FormulaLabel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("FormulaLabels");
                });

            modelBuilder.Entity("MathApi.Models.FormulaLabelType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("FormulaLabelTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Term"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Proposition"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Free Variable"
                        });
                });

            modelBuilder.Entity("MathApi.Models.FormulaString", b =>
                {
                    b.Property<long>("FormulaId")
                        .HasColumnType("bigint");

                    b.Property<long>("SerialNo")
                        .HasColumnType("bigint");

                    b.Property<long>("SymbolId")
                        .HasColumnType("bigint");

                    b.HasKey("FormulaId", "SerialNo");

                    b.HasIndex("SymbolId");

                    b.ToTable("FormulaStrings");
                });

            modelBuilder.Entity("MathApi.Models.FormulaStruct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Meaning")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("FormulaStructs");
                });

            modelBuilder.Entity("MathApi.Models.FormulaStructArgument", b =>
                {
                    b.Property<long>("FormulaStructId")
                        .HasColumnType("bigint");

                    b.Property<int>("SerialNo")
                        .HasColumnType("int");

                    b.Property<int>("LabelId")
                        .HasColumnType("int");

                    b.HasKey("FormulaStructId", "SerialNo");

                    b.HasIndex("LabelId");

                    b.ToTable("FormulaStructArguments");
                });

            modelBuilder.Entity("MathApi.Models.FormulaStructString", b =>
                {
                    b.Property<long>("FormulaStructId")
                        .HasColumnType("bigint");

                    b.Property<int>("SerialNo")
                        .HasColumnType("int");

                    b.Property<int?>("ArgumentSerialNo")
                        .HasColumnType("int");

                    b.Property<int?>("BoundArgumentSerialNo")
                        .HasColumnType("int");

                    b.Property<long?>("SymbolId")
                        .HasColumnType("bigint");

                    b.HasKey("FormulaStructId", "SerialNo");

                    b.HasIndex("SymbolId");

                    b.HasIndex("FormulaStructId", "ArgumentSerialNo");

                    b.HasIndex("FormulaStructId", "BoundArgumentSerialNo");

                    b.ToTable("FormulaStructStrings");
                });

            modelBuilder.Entity("MathApi.Models.FormulaStructStringSubstitution", b =>
                {
                    b.Property<long>("FormulaStructId")
                        .HasColumnType("bigint");

                    b.Property<int>("FormulaStructStringSerialNo")
                        .HasColumnType("int");

                    b.Property<int>("SerialNo")
                        .HasColumnType("int");

                    b.Property<int>("ArgumentFromSerialNo")
                        .HasColumnType("int");

                    b.Property<int>("ArgumentToSerialNo")
                        .HasColumnType("int");

                    b.HasKey("FormulaStructId", "FormulaStructStringSerialNo", "SerialNo");

                    b.HasIndex("FormulaStructId", "ArgumentFromSerialNo");

                    b.HasIndex("FormulaStructId", "ArgumentToSerialNo");

                    b.ToTable("FormulaStructStringSubstitutions");
                });

            modelBuilder.Entity("MathApi.Models.FormulaType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("FormulaTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Term"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Proposition"
                        });
                });

            modelBuilder.Entity("MathApi.Models.Inference", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long?>("TheoremId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Inferences");
                });

            modelBuilder.Entity("MathApi.Models.InferenceArgument", b =>
                {
                    b.Property<long>("InferenceId")
                        .HasColumnType("bigint");

                    b.Property<int>("SerialNo")
                        .HasColumnType("int");

                    b.Property<int>("FormulaLabelId")
                        .HasColumnType("int");

                    b.HasKey("InferenceId", "SerialNo");

                    b.HasIndex("FormulaLabelId")
                        .IsUnique();

                    b.ToTable("InferenceArguments");
                });

            modelBuilder.Entity("MathApi.Models.InferenceArgumentConstraint", b =>
                {
                    b.Property<long>("InferenceId")
                        .HasColumnType("bigint");

                    b.Property<int>("InferenceArgumentSerialNo")
                        .HasColumnType("int");

                    b.Property<int>("SerialNo")
                        .HasColumnType("int");

                    b.Property<int>("ConstraintDestinationInferenceArgumentSerialNo")
                        .HasColumnType("int");

                    b.Property<bool>("IsConstraintPredissolvedAssumption")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("InferenceId", "InferenceArgumentSerialNo", "SerialNo");

                    b.HasIndex("InferenceId", "ConstraintDestinationInferenceArgumentSerialNo");

                    b.ToTable("InferenceArgumentConstraints");
                });

            modelBuilder.Entity("MathApi.Models.InferenceAssumption", b =>
                {
                    b.Property<long>("InferenceId")
                        .HasColumnType("bigint");

                    b.Property<int>("SerialNo")
                        .HasColumnType("int");

                    b.Property<int>("FormulaStructArgumentMappingSerialNo")
                        .HasColumnType("int");

                    b.Property<long>("FormulaStructId")
                        .HasColumnType("bigint");

                    b.HasKey("InferenceId", "SerialNo");

                    b.HasIndex("FormulaStructId");

                    b.ToTable("InferenceAssumptions");
                });

            modelBuilder.Entity("MathApi.Models.InferenceAssumptionDissolutableAssumption", b =>
                {
                    b.Property<long>("InferenceId")
                        .HasColumnType("bigint");

                    b.Property<int>("InferenceAssumptionSerialNo")
                        .HasColumnType("int");

                    b.Property<int>("FormulaStructArgumentMappingSerialNo")
                        .HasColumnType("int");

                    b.Property<long>("FormulaStructId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsForce")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("InferenceId", "InferenceAssumptionSerialNo");

                    b.HasIndex("FormulaStructId");

                    b.ToTable("InferenceAssumptionDissolutableAssumptions");
                });

            modelBuilder.Entity("MathApi.Models.InferenceConclusion", b =>
                {
                    b.Property<long>("InferenceId")
                        .HasColumnType("bigint");

                    b.Property<bool>("AddAssumption")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("FormulaStructArgumentMappingSerialNo")
                        .HasColumnType("int");

                    b.Property<long>("FormulaStructId")
                        .HasColumnType("bigint");

                    b.HasKey("InferenceId");

                    b.HasIndex("FormulaStructId");

                    b.ToTable("InferenceConclusions");
                });

            modelBuilder.Entity("MathApi.Models.InferenceFormulaStructArgumentMapping", b =>
                {
                    b.Property<long>("InferenceId")
                        .HasColumnType("bigint");

                    b.Property<int>("SerialNo")
                        .HasColumnType("int");

                    b.Property<int>("FormulaStructArgumentSerialNo")
                        .HasColumnType("int");

                    b.Property<long>("FormulaStructId")
                        .HasColumnType("bigint");

                    b.Property<int>("InferenceArgumentSerialNo")
                        .HasColumnType("int");

                    b.HasKey("InferenceId", "SerialNo");

                    b.HasIndex("FormulaStructId", "FormulaStructArgumentSerialNo");

                    b.HasIndex("InferenceId", "InferenceArgumentSerialNo");

                    b.ToTable("InferenceFormulaStructArgumentMappings");
                });

            modelBuilder.Entity("MathApi.Models.Proof", b =>
                {
                    b.Property<long>("TheoremId")
                        .HasColumnType("bigint");

                    b.Property<long>("SerialNo")
                        .HasColumnType("bigint");

                    b.HasKey("TheoremId", "SerialNo");

                    b.ToTable("Proofs");
                });

            modelBuilder.Entity("MathApi.Models.ProofAssumption", b =>
                {
                    b.Property<long>("TheoremId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProofSerialNo")
                        .HasColumnType("bigint");

                    b.Property<long>("SerialNo")
                        .HasColumnType("bigint");

                    b.Property<long>("AddedProofInferenceSerialNo")
                        .HasColumnType("bigint");

                    b.Property<long?>("DissolutedProofInferenceSerialNo")
                        .HasColumnType("bigint");

                    b.HasKey("TheoremId", "ProofSerialNo", "SerialNo");

                    b.HasIndex("TheoremId", "ProofSerialNo", "AddedProofInferenceSerialNo")
                        .IsUnique();

                    b.HasIndex("TheoremId", "ProofSerialNo", "DissolutedProofInferenceSerialNo")
                        .IsUnique();

                    b.ToTable("ProofAssumptions");
                });

            modelBuilder.Entity("MathApi.Models.ProofInference", b =>
                {
                    b.Property<long>("TheoremId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProofSerialNo")
                        .HasColumnType("bigint");

                    b.Property<long>("SerialNo")
                        .HasColumnType("bigint");

                    b.Property<long?>("ConclusionFormulaId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ConclusionFormulaStructId")
                        .HasColumnType("bigint");

                    b.Property<long>("InferenceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProofAssumptionSerialNo")
                        .HasColumnType("bigint");

                    b.Property<long>("TreeFrom")
                        .HasColumnType("bigint");

                    b.Property<long>("TreeTo")
                        .HasColumnType("bigint");

                    b.HasKey("TheoremId", "ProofSerialNo", "SerialNo");

                    b.HasIndex("ConclusionFormulaId");

                    b.HasIndex("ConclusionFormulaStructId");

                    b.HasIndex("InferenceId");

                    b.HasIndex("TheoremId", "ProofSerialNo", "ProofAssumptionSerialNo");

                    b.ToTable("ProofInferences");
                });

            modelBuilder.Entity("MathApi.Models.ProofInferenceArgument", b =>
                {
                    b.Property<long>("TheoremId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProofSerialNo")
                        .HasColumnType("bigint");

                    b.Property<long>("ProofInferenceSerialNo")
                        .HasColumnType("bigint");

                    b.Property<long>("SerialNo")
                        .HasColumnType("bigint");

                    b.Property<long?>("FormulaId")
                        .HasColumnType("bigint");

                    b.Property<long?>("FormulaStructId")
                        .HasColumnType("bigint");

                    b.HasKey("TheoremId", "ProofSerialNo", "ProofInferenceSerialNo", "SerialNo");

                    b.HasIndex("FormulaId");

                    b.HasIndex("FormulaStructId");

                    b.ToTable("ProofInferenceArguments");
                });

            modelBuilder.Entity("MathApi.Models.Symbol", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int?>("Arity")
                        .HasColumnType("int");

                    b.Property<int?>("ArityFormulaTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Character")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Meaning")
                        .HasColumnType("longtext");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArityFormulaTypeId");

                    b.HasIndex("TypeId");

                    b.HasIndex("Character", "TypeId")
                        .IsUnique();

                    b.ToTable("Symbols");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Character = "□",
                            Meaning = "bound variable",
                            TypeId = 2
                        },
                        new
                        {
                            Id = 2L,
                            Arity = 2,
                            ArityFormulaTypeId = 1,
                            Character = "=",
                            Meaning = "equals",
                            TypeId = 4
                        },
                        new
                        {
                            Id = 3L,
                            Arity = 0,
                            ArityFormulaTypeId = 2,
                            Character = "⊥",
                            Meaning = "contradiction",
                            TypeId = 5
                        },
                        new
                        {
                            Id = 4L,
                            Arity = 1,
                            ArityFormulaTypeId = 2,
                            Character = "￢",
                            Meaning = "not",
                            TypeId = 5
                        },
                        new
                        {
                            Id = 5L,
                            Arity = 2,
                            ArityFormulaTypeId = 2,
                            Character = "∧",
                            Meaning = "and",
                            TypeId = 5
                        },
                        new
                        {
                            Id = 6L,
                            Arity = 2,
                            ArityFormulaTypeId = 2,
                            Character = "∨",
                            Meaning = "or",
                            TypeId = 5
                        },
                        new
                        {
                            Id = 7L,
                            Arity = 2,
                            ArityFormulaTypeId = 2,
                            Character = "⇒",
                            Meaning = "imply",
                            TypeId = 5
                        },
                        new
                        {
                            Id = 8L,
                            Arity = 1,
                            ArityFormulaTypeId = 2,
                            Character = "∀",
                            Meaning = "forall",
                            TypeId = 7
                        },
                        new
                        {
                            Id = 9L,
                            Arity = 1,
                            ArityFormulaTypeId = 2,
                            Character = "∃",
                            Meaning = "exists",
                            TypeId = 7
                        });
                });

            modelBuilder.Entity("MathApi.Models.SymbolType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("FormulaTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsQuantifier")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("FormulaTypeId");

                    b.ToTable("SymbolTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FormulaTypeId = 1,
                            IsQuantifier = false,
                            Name = "free variable"
                        },
                        new
                        {
                            Id = 2,
                            FormulaTypeId = 1,
                            IsQuantifier = false,
                            Name = "bound variable"
                        },
                        new
                        {
                            Id = 3,
                            FormulaTypeId = 1,
                            IsQuantifier = false,
                            Name = "function"
                        },
                        new
                        {
                            Id = 4,
                            FormulaTypeId = 2,
                            IsQuantifier = false,
                            Name = "predicate"
                        },
                        new
                        {
                            Id = 5,
                            FormulaTypeId = 2,
                            IsQuantifier = false,
                            Name = "logic"
                        },
                        new
                        {
                            Id = 6,
                            FormulaTypeId = 1,
                            IsQuantifier = true,
                            Name = "term quantifier"
                        },
                        new
                        {
                            Id = 7,
                            FormulaTypeId = 2,
                            IsQuantifier = true,
                            Name = "proposition quantifier"
                        });
                });

            modelBuilder.Entity("MathApi.Models.Theorem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("InferenceId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsProved")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("InferenceId")
                        .IsUnique();

                    b.ToTable("Theorems");
                });

            modelBuilder.Entity("MathApi.Models.TheoremAssumption", b =>
                {
                    b.Property<long>("TheoremId")
                        .HasColumnType("bigint");

                    b.Property<long>("SerialNo")
                        .HasColumnType("bigint");

                    b.Property<long>("FormulaId")
                        .HasColumnType("bigint");

                    b.HasKey("TheoremId", "SerialNo");

                    b.HasIndex("FormulaId");

                    b.ToTable("TheoremAssumptions");
                });

            modelBuilder.Entity("MathApi.Models.TheoremConclusion", b =>
                {
                    b.Property<long>("TheoremId")
                        .HasColumnType("bigint");

                    b.Property<long>("SerialNo")
                        .HasColumnType("bigint");

                    b.Property<long>("FormulaId")
                        .HasColumnType("bigint");

                    b.HasKey("TheoremId", "SerialNo");

                    b.HasIndex("FormulaId");

                    b.ToTable("TheoremConclusions");
                });

            modelBuilder.Entity("MathApi.Models.AxiomProposition", b =>
                {
                    b.HasOne("MathApi.Models.Axiom", "Axiom")
                        .WithMany("AxiomPropositions")
                        .HasForeignKey("AxiomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MathApi.Models.Formula", "Formula")
                        .WithMany("AxiomPropositions")
                        .HasForeignKey("FormulaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Axiom");

                    b.Navigation("Formula");
                });

            modelBuilder.Entity("MathApi.Models.FormulaChain", b =>
                {
                    b.HasOne("MathApi.Models.Formula", "Formula")
                        .WithMany("FormulaChains")
                        .HasForeignKey("FormulaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MathApi.Models.FormulaString", "FromFormulaString")
                        .WithMany("FormulaChainAtFroms")
                        .HasForeignKey("FormulaId", "FromFormulaStringSerialNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MathApi.Models.FormulaString", "ToFormulaString")
                        .WithOne("FormulaChainAtTo")
                        .HasForeignKey("MathApi.Models.FormulaChain", "FormulaId", "ToFormulaStringSerialNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Formula");

                    b.Navigation("FromFormulaString");

                    b.Navigation("ToFormulaString");
                });

            modelBuilder.Entity("MathApi.Models.FormulaLabel", b =>
                {
                    b.HasOne("MathApi.Models.FormulaLabelType", "Type")
                        .WithMany("FormulaLabels")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("MathApi.Models.FormulaString", b =>
                {
                    b.HasOne("MathApi.Models.Formula", "Formula")
                        .WithMany("FormulaStrings")
                        .HasForeignKey("FormulaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MathApi.Models.Symbol", "Symbol")
                        .WithMany("FormulaStrings")
                        .HasForeignKey("SymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Formula");

                    b.Navigation("Symbol");
                });

            modelBuilder.Entity("MathApi.Models.FormulaStructArgument", b =>
                {
                    b.HasOne("MathApi.Models.FormulaStruct", "FormulaStruct")
                        .WithMany("Arguments")
                        .HasForeignKey("FormulaStructId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MathApi.Models.FormulaLabel", "Label")
                        .WithMany("FormulaStructArguments")
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormulaStruct");

                    b.Navigation("Label");
                });

            modelBuilder.Entity("MathApi.Models.FormulaStructString", b =>
                {
                    b.HasOne("MathApi.Models.FormulaStruct", "FormulaStruct")
                        .WithMany("Strings")
                        .HasForeignKey("FormulaStructId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MathApi.Models.Symbol", "Symbol")
                        .WithMany("FormulaStructStrings")
                        .HasForeignKey("SymbolId");

                    b.HasOne("MathApi.Models.FormulaStructArgument", "Argument")
                        .WithMany("Strings")
                        .HasForeignKey("FormulaStructId", "ArgumentSerialNo");

                    b.HasOne("MathApi.Models.FormulaStructArgument", "BoundArgument")
                        .WithMany("StringsToBoundArgument")
                        .HasForeignKey("FormulaStructId", "BoundArgumentSerialNo")
                        .HasConstraintName("FK_FormulaStructStrings_FormulaStructArguments_FormulaStructId~1");

                    b.Navigation("Argument");

                    b.Navigation("BoundArgument");

                    b.Navigation("FormulaStruct");

                    b.Navigation("Symbol");
                });

            modelBuilder.Entity("MathApi.Models.FormulaStructStringSubstitution", b =>
                {
                    b.HasOne("MathApi.Models.FormulaStructArgument", "ArgumentFrom")
                        .WithMany("StringsToSubstitutionArgumentFrom")
                        .HasForeignKey("FormulaStructId", "ArgumentFromSerialNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MathApi.Models.FormulaStructArgument", "ArgumentTo")
                        .WithMany("StringsToSubstitutionArgumentTo")
                        .HasForeignKey("FormulaStructId", "ArgumentToSerialNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_FormulaStructStringSubstitutions_FormulaStructArguments_For~1");

                    b.HasOne("MathApi.Models.FormulaStructString", "FormulaStructString")
                        .WithMany("Substitutions")
                        .HasForeignKey("FormulaStructId", "FormulaStructStringSerialNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArgumentFrom");

                    b.Navigation("ArgumentTo");

                    b.Navigation("FormulaStructString");
                });

            modelBuilder.Entity("MathApi.Models.InferenceArgument", b =>
                {
                    b.HasOne("MathApi.Models.FormulaLabel", "FormulaLabel")
                        .WithOne("InferenceArgument")
                        .HasForeignKey("MathApi.Models.InferenceArgument", "FormulaLabelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MathApi.Models.Inference", "Inference")
                        .WithMany("Arguments")
                        .HasForeignKey("InferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormulaLabel");

                    b.Navigation("Inference");
                });

            modelBuilder.Entity("MathApi.Models.InferenceArgumentConstraint", b =>
                {
                    b.HasOne("MathApi.Models.InferenceArgument", "ConstraintDestinationInferenceArgument")
                        .WithMany("InferenceArgumentConstraintDestinations")
                        .HasForeignKey("InferenceId", "ConstraintDestinationInferenceArgumentSerialNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MathApi.Models.InferenceArgument", "InferenceArgument")
                        .WithMany("InferenceArgumentConstraints")
                        .HasForeignKey("InferenceId", "InferenceArgumentSerialNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_InferenceArgumentConstraints_InferenceArguments_InferenceId~1");

                    b.Navigation("ConstraintDestinationInferenceArgument");

                    b.Navigation("InferenceArgument");
                });

            modelBuilder.Entity("MathApi.Models.InferenceAssumption", b =>
                {
                    b.HasOne("MathApi.Models.FormulaStruct", "FormulaStruct")
                        .WithMany("InferenceAssumptions")
                        .HasForeignKey("FormulaStructId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MathApi.Models.Inference", "Inference")
                        .WithMany("Assumptions")
                        .HasForeignKey("InferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormulaStruct");

                    b.Navigation("Inference");
                });

            modelBuilder.Entity("MathApi.Models.InferenceAssumptionDissolutableAssumption", b =>
                {
                    b.HasOne("MathApi.Models.FormulaStruct", "FormulaStruct")
                        .WithMany("InferenceAssumptionDissolutableAssumptions")
                        .HasForeignKey("FormulaStructId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MathApi.Models.InferenceAssumption", "InferenceAssumption")
                        .WithOne("DissolutableAssumption")
                        .HasForeignKey("MathApi.Models.InferenceAssumptionDissolutableAssumption", "InferenceId", "InferenceAssumptionSerialNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormulaStruct");

                    b.Navigation("InferenceAssumption");
                });

            modelBuilder.Entity("MathApi.Models.InferenceConclusion", b =>
                {
                    b.HasOne("MathApi.Models.FormulaStruct", "FormulaStruct")
                        .WithMany("InferenceConclusions")
                        .HasForeignKey("FormulaStructId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MathApi.Models.Inference", "Inference")
                        .WithMany("Conclusions")
                        .HasForeignKey("InferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormulaStruct");

                    b.Navigation("Inference");
                });

            modelBuilder.Entity("MathApi.Models.InferenceFormulaStructArgumentMapping", b =>
                {
                    b.HasOne("MathApi.Models.Inference", "Inference")
                        .WithMany("FormulaStructArgumentMappings")
                        .HasForeignKey("InferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MathApi.Models.FormulaStructArgument", "FormulaStructArgument")
                        .WithMany("InferenceFormulaStructArgumentMappings")
                        .HasForeignKey("FormulaStructId", "FormulaStructArgumentSerialNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MathApi.Models.InferenceArgument", "InferenceArgument")
                        .WithMany("InferenceFormulaStructArgumentMappings")
                        .HasForeignKey("InferenceId", "InferenceArgumentSerialNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MathApi.Models.InferenceAssumption", "InferenceAssumption")
                        .WithMany("FormulaStructArgumentMappings")
                        .HasForeignKey("InferenceId", "SerialNo")
                        .HasPrincipalKey("InferenceId", "FormulaStructArgumentMappingSerialNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MathApi.Models.InferenceAssumptionDissolutableAssumption", "InferenceAssumptionDissolutableAssumption")
                        .WithMany("FormulaStructArgumentMappings")
                        .HasForeignKey("InferenceId", "SerialNo")
                        .HasPrincipalKey("InferenceId", "FormulaStructArgumentMappingSerialNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MathApi.Models.InferenceConclusion", "InferenceConclusion")
                        .WithMany("FormulaStructArgumentMappings")
                        .HasForeignKey("InferenceId", "SerialNo")
                        .HasPrincipalKey("InferenceId", "FormulaStructArgumentMappingSerialNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormulaStructArgument");

                    b.Navigation("Inference");

                    b.Navigation("InferenceArgument");

                    b.Navigation("InferenceAssumption");

                    b.Navigation("InferenceAssumptionDissolutableAssumption");

                    b.Navigation("InferenceConclusion");
                });

            modelBuilder.Entity("MathApi.Models.Proof", b =>
                {
                    b.HasOne("MathApi.Models.Theorem", "Theorem")
                        .WithMany("Proofs")
                        .HasForeignKey("TheoremId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Theorem");
                });

            modelBuilder.Entity("MathApi.Models.ProofAssumption", b =>
                {
                    b.HasOne("MathApi.Models.Proof", "Proof")
                        .WithMany("Assumptions")
                        .HasForeignKey("TheoremId", "ProofSerialNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MathApi.Models.ProofInference", "AddedProofInference")
                        .WithOne("AddingProofInference")
                        .HasForeignKey("MathApi.Models.ProofAssumption", "TheoremId", "ProofSerialNo", "AddedProofInferenceSerialNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MathApi.Models.ProofInference", "DissolutedProofInference")
                        .WithOne("DissolutingAssumption")
                        .HasForeignKey("MathApi.Models.ProofAssumption", "TheoremId", "ProofSerialNo", "DissolutedProofInferenceSerialNo");

                    b.Navigation("AddedProofInference");

                    b.Navigation("DissolutedProofInference");

                    b.Navigation("Proof");
                });

            modelBuilder.Entity("MathApi.Models.ProofInference", b =>
                {
                    b.HasOne("MathApi.Models.Formula", "ConclusionFormula")
                        .WithMany("ProofInferences")
                        .HasForeignKey("ConclusionFormulaId");

                    b.HasOne("MathApi.Models.FormulaStruct", "ConclusionFormulaStruct")
                        .WithMany("ProofInferences")
                        .HasForeignKey("ConclusionFormulaStructId");

                    b.HasOne("MathApi.Models.Inference", "Inference")
                        .WithMany("ProofInferences")
                        .HasForeignKey("InferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MathApi.Models.Proof", "Proof")
                        .WithMany("Inferences")
                        .HasForeignKey("TheoremId", "ProofSerialNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MathApi.Models.ProofAssumption", "ProofAssumption")
                        .WithMany("ProofInferences")
                        .HasForeignKey("TheoremId", "ProofSerialNo", "ProofAssumptionSerialNo");

                    b.Navigation("ConclusionFormula");

                    b.Navigation("ConclusionFormulaStruct");

                    b.Navigation("Inference");

                    b.Navigation("Proof");

                    b.Navigation("ProofAssumption");
                });

            modelBuilder.Entity("MathApi.Models.ProofInferenceArgument", b =>
                {
                    b.HasOne("MathApi.Models.Formula", "Formula")
                        .WithMany("ProofInferenceArguments")
                        .HasForeignKey("FormulaId");

                    b.HasOne("MathApi.Models.FormulaStruct", "FormulaStruct")
                        .WithMany("ProofInferenceArguments")
                        .HasForeignKey("FormulaStructId");

                    b.HasOne("MathApi.Models.ProofInference", "ProofInference")
                        .WithMany("ProofInferenceArguments")
                        .HasForeignKey("TheoremId", "ProofSerialNo", "ProofInferenceSerialNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Formula");

                    b.Navigation("FormulaStruct");

                    b.Navigation("ProofInference");
                });

            modelBuilder.Entity("MathApi.Models.Symbol", b =>
                {
                    b.HasOne("MathApi.Models.FormulaType", "ArityFormulaType")
                        .WithMany("Symbols")
                        .HasForeignKey("ArityFormulaTypeId");

                    b.HasOne("MathApi.Models.SymbolType", "Type")
                        .WithMany("Symbols")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArityFormulaType");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("MathApi.Models.SymbolType", b =>
                {
                    b.HasOne("MathApi.Models.FormulaType", "FormulaType")
                        .WithMany("SymbolTypes")
                        .HasForeignKey("FormulaTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormulaType");
                });

            modelBuilder.Entity("MathApi.Models.Theorem", b =>
                {
                    b.HasOne("MathApi.Models.Inference", "Inference")
                        .WithOne("Theorem")
                        .HasForeignKey("MathApi.Models.Theorem", "InferenceId");

                    b.Navigation("Inference");
                });

            modelBuilder.Entity("MathApi.Models.TheoremAssumption", b =>
                {
                    b.HasOne("MathApi.Models.Formula", "Formula")
                        .WithMany("TheoremAssumptions")
                        .HasForeignKey("FormulaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MathApi.Models.Theorem", "Theorem")
                        .WithMany("Assumptions")
                        .HasForeignKey("TheoremId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Formula");

                    b.Navigation("Theorem");
                });

            modelBuilder.Entity("MathApi.Models.TheoremConclusion", b =>
                {
                    b.HasOne("MathApi.Models.Formula", "Formula")
                        .WithMany("TheoremConclusions")
                        .HasForeignKey("FormulaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MathApi.Models.Theorem", "Theorem")
                        .WithMany("Conclusions")
                        .HasForeignKey("TheoremId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Formula");

                    b.Navigation("Theorem");
                });

            modelBuilder.Entity("MathApi.Models.Axiom", b =>
                {
                    b.Navigation("AxiomPropositions");
                });

            modelBuilder.Entity("MathApi.Models.Formula", b =>
                {
                    b.Navigation("AxiomPropositions");

                    b.Navigation("FormulaChains");

                    b.Navigation("FormulaStrings");

                    b.Navigation("ProofInferenceArguments");

                    b.Navigation("ProofInferences");

                    b.Navigation("TheoremAssumptions");

                    b.Navigation("TheoremConclusions");
                });

            modelBuilder.Entity("MathApi.Models.FormulaLabel", b =>
                {
                    b.Navigation("FormulaStructArguments");

                    b.Navigation("InferenceArgument");
                });

            modelBuilder.Entity("MathApi.Models.FormulaLabelType", b =>
                {
                    b.Navigation("FormulaLabels");
                });

            modelBuilder.Entity("MathApi.Models.FormulaString", b =>
                {
                    b.Navigation("FormulaChainAtFroms");

                    b.Navigation("FormulaChainAtTo");
                });

            modelBuilder.Entity("MathApi.Models.FormulaStruct", b =>
                {
                    b.Navigation("Arguments");

                    b.Navigation("InferenceAssumptionDissolutableAssumptions");

                    b.Navigation("InferenceAssumptions");

                    b.Navigation("InferenceConclusions");

                    b.Navigation("ProofInferenceArguments");

                    b.Navigation("ProofInferences");

                    b.Navigation("Strings");
                });

            modelBuilder.Entity("MathApi.Models.FormulaStructArgument", b =>
                {
                    b.Navigation("InferenceFormulaStructArgumentMappings");

                    b.Navigation("Strings");

                    b.Navigation("StringsToBoundArgument");

                    b.Navigation("StringsToSubstitutionArgumentFrom");

                    b.Navigation("StringsToSubstitutionArgumentTo");
                });

            modelBuilder.Entity("MathApi.Models.FormulaStructString", b =>
                {
                    b.Navigation("Substitutions");
                });

            modelBuilder.Entity("MathApi.Models.FormulaType", b =>
                {
                    b.Navigation("SymbolTypes");

                    b.Navigation("Symbols");
                });

            modelBuilder.Entity("MathApi.Models.Inference", b =>
                {
                    b.Navigation("Arguments");

                    b.Navigation("Assumptions");

                    b.Navigation("Conclusions");

                    b.Navigation("FormulaStructArgumentMappings");

                    b.Navigation("ProofInferences");

                    b.Navigation("Theorem");
                });

            modelBuilder.Entity("MathApi.Models.InferenceArgument", b =>
                {
                    b.Navigation("InferenceArgumentConstraintDestinations");

                    b.Navigation("InferenceArgumentConstraints");

                    b.Navigation("InferenceFormulaStructArgumentMappings");
                });

            modelBuilder.Entity("MathApi.Models.InferenceAssumption", b =>
                {
                    b.Navigation("DissolutableAssumption");

                    b.Navigation("FormulaStructArgumentMappings");
                });

            modelBuilder.Entity("MathApi.Models.InferenceAssumptionDissolutableAssumption", b =>
                {
                    b.Navigation("FormulaStructArgumentMappings");
                });

            modelBuilder.Entity("MathApi.Models.InferenceConclusion", b =>
                {
                    b.Navigation("FormulaStructArgumentMappings");
                });

            modelBuilder.Entity("MathApi.Models.Proof", b =>
                {
                    b.Navigation("Assumptions");

                    b.Navigation("Inferences");
                });

            modelBuilder.Entity("MathApi.Models.ProofAssumption", b =>
                {
                    b.Navigation("ProofInferences");
                });

            modelBuilder.Entity("MathApi.Models.ProofInference", b =>
                {
                    b.Navigation("AddingProofInference");

                    b.Navigation("DissolutingAssumption");

                    b.Navigation("ProofInferenceArguments");
                });

            modelBuilder.Entity("MathApi.Models.Symbol", b =>
                {
                    b.Navigation("FormulaStrings");

                    b.Navigation("FormulaStructStrings");
                });

            modelBuilder.Entity("MathApi.Models.SymbolType", b =>
                {
                    b.Navigation("Symbols");
                });

            modelBuilder.Entity("MathApi.Models.Theorem", b =>
                {
                    b.Navigation("Assumptions");

                    b.Navigation("Conclusions");

                    b.Navigation("Proofs");
                });
#pragma warning restore 612, 618
        }
    }
}
