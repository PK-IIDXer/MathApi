// <auto-generated />
using System;
using MathApi.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MathApi.Migrations
{
    [DbContext(typeof(MathDbContext))]
    [Migration("20230706081211_FixFormulaTables")]
    partial class FixFormulaTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MathApi.Models.Formula", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Meaning")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Formulas");
                });

            modelBuilder.Entity("MathApi.Models.FormulaChain", b =>
                {
                    b.Property<long>("FormulaId")
                        .HasColumnType("bigint");

                    b.Property<long>("SerialNo")
                        .HasColumnType("bigint");

                    b.Property<long>("FromFormulaStringSerialNo")
                        .HasColumnType("bigint");

                    b.Property<long>("ToFormulaStringSerialNo")
                        .HasColumnType("bigint");

                    b.HasKey("FormulaId", "SerialNo");

                    b.HasIndex("FormulaId", "FromFormulaStringSerialNo");

                    b.HasIndex("FormulaId", "ToFormulaStringSerialNo");

                    b.ToTable("FormulasChain");
                });

            modelBuilder.Entity("MathApi.Models.FormulaString", b =>
                {
                    b.Property<long>("FormulaId")
                        .HasColumnType("bigint");

                    b.Property<long>("SerialNo")
                        .HasColumnType("bigint");

                    b.Property<long>("SymbolId")
                        .HasColumnType("bigint");

                    b.HasKey("FormulaId", "SerialNo");

                    b.HasIndex("SymbolId");

                    b.ToTable("FormulaStrings");
                });

            modelBuilder.Entity("MathApi.Models.FormulaType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("FormulaTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Term"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Proposition"
                        });
                });

            modelBuilder.Entity("MathApi.Models.Symbol", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int?>("Arity")
                        .HasColumnType("int");

                    b.Property<long?>("ArityFormulaTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Character")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Meaning")
                        .HasColumnType("longtext");

                    b.Property<long>("SymbolTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ArityFormulaTypeId");

                    b.HasIndex("SymbolTypeId");

                    b.HasIndex("Character", "SymbolTypeId")
                        .IsUnique();

                    b.ToTable("Symbols");
                });

            modelBuilder.Entity("MathApi.Models.SymbolType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("FormulaTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("FormulaTypeId");

                    b.ToTable("SymbolTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            FormulaTypeId = 1L,
                            Name = "free variable"
                        },
                        new
                        {
                            Id = 2L,
                            FormulaTypeId = 1L,
                            Name = "bound variable"
                        },
                        new
                        {
                            Id = 3L,
                            FormulaTypeId = 2L,
                            Name = "proposition variable"
                        },
                        new
                        {
                            Id = 4L,
                            FormulaTypeId = 1L,
                            Name = "constant"
                        },
                        new
                        {
                            Id = 5L,
                            FormulaTypeId = 1L,
                            Name = "function"
                        },
                        new
                        {
                            Id = 6L,
                            FormulaTypeId = 2L,
                            Name = "predicate"
                        },
                        new
                        {
                            Id = 7L,
                            FormulaTypeId = 2L,
                            Name = "logic"
                        },
                        new
                        {
                            Id = 8L,
                            FormulaTypeId = 1L,
                            Name = "term quantifier"
                        },
                        new
                        {
                            Id = 9L,
                            FormulaTypeId = 2L,
                            Name = "proposition quantifier"
                        });
                });

            modelBuilder.Entity("MathApi.Models.FormulaChain", b =>
                {
                    b.HasOne("MathApi.Models.Formula", "Formula")
                        .WithMany("FormulaChains")
                        .HasForeignKey("FormulaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MathApi.Models.FormulaString", null)
                        .WithMany()
                        .HasForeignKey("FormulaId", "FromFormulaStringSerialNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MathApi.Models.FormulaString", null)
                        .WithMany()
                        .HasForeignKey("FormulaId", "ToFormulaStringSerialNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Formula");
                });

            modelBuilder.Entity("MathApi.Models.FormulaString", b =>
                {
                    b.HasOne("MathApi.Models.Formula", "Formula")
                        .WithMany("FormulaStrings")
                        .HasForeignKey("FormulaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MathApi.Models.Symbol", "Symbol")
                        .WithMany()
                        .HasForeignKey("SymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Formula");

                    b.Navigation("Symbol");
                });

            modelBuilder.Entity("MathApi.Models.Symbol", b =>
                {
                    b.HasOne("MathApi.Models.FormulaType", "ArityFormulaType")
                        .WithMany()
                        .HasForeignKey("ArityFormulaTypeId");

                    b.HasOne("MathApi.Models.SymbolType", "SymbolType")
                        .WithMany()
                        .HasForeignKey("SymbolTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArityFormulaType");

                    b.Navigation("SymbolType");
                });

            modelBuilder.Entity("MathApi.Models.SymbolType", b =>
                {
                    b.HasOne("MathApi.Models.FormulaType", "FormulaType")
                        .WithMany()
                        .HasForeignKey("FormulaTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormulaType");
                });

            modelBuilder.Entity("MathApi.Models.Formula", b =>
                {
                    b.Navigation("FormulaChains");

                    b.Navigation("FormulaStrings");
                });
#pragma warning restore 612, 618
        }
    }
}
