// <auto-generated />
using System;
using MathApi.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MathApi.Migrations
{
    [DbContext(typeof(MathDbContext))]
    [Migration("20230712065846_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MathApi.Models.Axiom", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Remarks")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Axioms");
                });

            modelBuilder.Entity("MathApi.Models.AxiomProposition", b =>
                {
                    b.Property<long>("AxiomId")
                        .HasColumnType("bigint");

                    b.Property<long>("SerialNo")
                        .HasColumnType("bigint");

                    b.Property<long>("FormulaId")
                        .HasColumnType("bigint");

                    b.Property<string>("Remarks")
                        .HasColumnType("longtext");

                    b.HasKey("AxiomId", "SerialNo");

                    b.HasIndex("FormulaId");

                    b.ToTable("AxiomPropositions");
                });

            modelBuilder.Entity("MathApi.Models.Formula", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Meaning")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Formulas");
                });

            modelBuilder.Entity("MathApi.Models.FormulaChain", b =>
                {
                    b.Property<long>("FormulaId")
                        .HasColumnType("bigint");

                    b.Property<long>("SerialNo")
                        .HasColumnType("bigint");

                    b.Property<long>("FromFormulaStringSerialNo")
                        .HasColumnType("bigint");

                    b.Property<long>("ToFormulaStringSerialNo")
                        .HasColumnType("bigint");

                    b.HasKey("FormulaId", "SerialNo");

                    b.HasIndex("FormulaId", "FromFormulaStringSerialNo")
                        .IsUnique();

                    b.HasIndex("FormulaId", "ToFormulaStringSerialNo")
                        .IsUnique();

                    b.ToTable("FormulasChain");
                });

            modelBuilder.Entity("MathApi.Models.FormulaString", b =>
                {
                    b.Property<long>("FormulaId")
                        .HasColumnType("bigint");

                    b.Property<long>("SerialNo")
                        .HasColumnType("bigint");

                    b.Property<long>("SymbolId")
                        .HasColumnType("bigint");

                    b.HasKey("FormulaId", "SerialNo");

                    b.HasIndex("SymbolId");

                    b.ToTable("FormulaStrings");
                });

            modelBuilder.Entity("MathApi.Models.FormulaType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("FormulaTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Term"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Proposition"
                        });
                });

            modelBuilder.Entity("MathApi.Models.Inference", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<bool>("IsAssumptionAdd")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Inferences");
                });

            modelBuilder.Entity("MathApi.Models.InferenceArgument", b =>
                {
                    b.Property<long>("InferenceId")
                        .HasColumnType("bigint");

                    b.Property<int>("SerialNo")
                        .HasColumnType("int");

                    b.Property<int>("InferenceArgumentTypeId")
                        .HasColumnType("int");

                    b.HasKey("InferenceId", "SerialNo");

                    b.HasIndex("InferenceArgumentTypeId");

                    b.ToTable("InferenceArguments");
                });

            modelBuilder.Entity("MathApi.Models.InferenceArgumentConstraint", b =>
                {
                    b.Property<long>("InferenceId")
                        .HasColumnType("bigint");

                    b.Property<int>("InferenceAssumptionSerialNo")
                        .HasColumnType("int");

                    b.Property<int>("SerialNo")
                        .HasColumnType("int");

                    b.Property<int>("ConstraintDestinationInferenceArgumentSerialNo")
                        .HasColumnType("int");

                    b.Property<bool>("IsConstraintPredissolvedAssumption")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("InferenceId", "InferenceAssumptionSerialNo", "SerialNo");

                    b.HasIndex("InferenceId", "ConstraintDestinationInferenceArgumentSerialNo");

                    b.ToTable("InferenceArgumentConstraints");
                });

            modelBuilder.Entity("MathApi.Models.InferenceArgumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("InferenceArgumentTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "term"
                        },
                        new
                        {
                            Id = 2,
                            Name = "proposition"
                        },
                        new
                        {
                            Id = 3,
                            Name = "free variable"
                        });
                });

            modelBuilder.Entity("MathApi.Models.InferenceAssumption", b =>
                {
                    b.Property<long>("InferenceId")
                        .HasColumnType("bigint");

                    b.Property<int>("SerialNo")
                        .HasColumnType("int");

                    b.Property<int>("InferenceAssumptionDissolutionTypeId")
                        .HasColumnType("int");

                    b.HasKey("InferenceId", "SerialNo");

                    b.HasIndex("InferenceAssumptionDissolutionTypeId");

                    b.ToTable("InferenceAssumptions");
                });

            modelBuilder.Entity("MathApi.Models.InferenceAssumptionDissolutableAssumptionFormula", b =>
                {
                    b.Property<long>("InferenceId")
                        .HasColumnType("bigint");

                    b.Property<int>("InferenceAssumptionSerialNo")
                        .HasColumnType("int");

                    b.Property<int>("SerialNo")
                        .HasColumnType("int");

                    b.Property<int?>("BoundInferenceArgumentSerialNo")
                        .HasColumnType("int");

                    b.Property<int?>("InferenceArgumentSerialNo")
                        .HasColumnType("int");

                    b.Property<int?>("SubstitutionInferenceArgumentFromSerialNo")
                        .HasColumnType("int");

                    b.Property<int?>("SubstitutionInferenceArgumentToSerialNo")
                        .HasColumnType("int");

                    b.Property<long?>("SymbolId")
                        .HasColumnType("bigint");

                    b.HasKey("InferenceId", "InferenceAssumptionSerialNo", "SerialNo");

                    b.HasIndex("SymbolId");

                    b.HasIndex("InferenceId", "BoundInferenceArgumentSerialNo")
                        .IsUnique();

                    b.HasIndex("InferenceId", "InferenceArgumentSerialNo")
                        .IsUnique()
                        .HasDatabaseName("IX_InferenceAssumptionDissolutableAssumptionFormula_InferenceI~1");

                    b.HasIndex("InferenceId", "SubstitutionInferenceArgumentFromSerialNo")
                        .IsUnique()
                        .HasDatabaseName("IX_InferenceAssumptionDissolutableAssumptionFormula_InferenceI~2");

                    b.HasIndex("InferenceId", "SubstitutionInferenceArgumentToSerialNo")
                        .IsUnique()
                        .HasDatabaseName("IX_InferenceAssumptionDissolutableAssumptionFormula_InferenceI~3");

                    b.ToTable("InferenceAssumptionDissolutableAssumptionFormula");
                });

            modelBuilder.Entity("MathApi.Models.InferenceAssumptionDissolutionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("InferenceAssumptionDissolutionTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "none"
                        },
                        new
                        {
                            Id = 2,
                            Name = "required"
                        },
                        new
                        {
                            Id = 3,
                            Name = "necessary"
                        });
                });

            modelBuilder.Entity("MathApi.Models.InferenceAssumptionFormula", b =>
                {
                    b.Property<long>("InferenceId")
                        .HasColumnType("bigint");

                    b.Property<int>("InferenceAssumptionSerialNo")
                        .HasColumnType("int");

                    b.Property<int>("SerialNo")
                        .HasColumnType("int");

                    b.Property<int?>("BoundInferenceArgumentSerialNo")
                        .HasColumnType("int");

                    b.Property<int?>("InferenceArgumentSerialNo")
                        .HasColumnType("int");

                    b.Property<int?>("SubstitutionInferenceArgumentFromSerialNo")
                        .HasColumnType("int");

                    b.Property<int?>("SubstitutionInferenceArgumentToSerialNo")
                        .HasColumnType("int");

                    b.Property<long?>("SymbolId")
                        .HasColumnType("bigint");

                    b.HasKey("InferenceId", "InferenceAssumptionSerialNo", "SerialNo");

                    b.HasIndex("SymbolId");

                    b.HasIndex("InferenceId", "BoundInferenceArgumentSerialNo")
                        .IsUnique();

                    b.HasIndex("InferenceId", "InferenceArgumentSerialNo")
                        .IsUnique();

                    b.HasIndex("InferenceId", "SubstitutionInferenceArgumentFromSerialNo")
                        .IsUnique();

                    b.HasIndex("InferenceId", "SubstitutionInferenceArgumentToSerialNo")
                        .IsUnique()
                        .HasDatabaseName("IX_InferenceAssumptionFormulas_InferenceId_SubstitutionInferen~1");

                    b.ToTable("InferenceAssumptionFormulas");
                });

            modelBuilder.Entity("MathApi.Models.InferenceConclusionFormula", b =>
                {
                    b.Property<long>("InferenceId")
                        .HasColumnType("bigint");

                    b.Property<int>("SerialNo")
                        .HasColumnType("int");

                    b.Property<int?>("BoundInferenceArgumentSerialNo")
                        .HasColumnType("int");

                    b.Property<int?>("InferenceArgumentSerialNo")
                        .HasColumnType("int");

                    b.Property<int?>("SubstitutionInferenceArgumentFromSerialNo")
                        .HasColumnType("int");

                    b.Property<int?>("SubstitutionInferenceArgumentToSerialNo")
                        .HasColumnType("int");

                    b.Property<long?>("SymbolId")
                        .HasColumnType("bigint");

                    b.HasKey("InferenceId", "SerialNo");

                    b.HasIndex("SymbolId");

                    b.HasIndex("InferenceId", "BoundInferenceArgumentSerialNo")
                        .IsUnique();

                    b.HasIndex("InferenceId", "InferenceArgumentSerialNo")
                        .IsUnique();

                    b.HasIndex("InferenceId", "SubstitutionInferenceArgumentFromSerialNo")
                        .IsUnique();

                    b.HasIndex("InferenceId", "SubstitutionInferenceArgumentToSerialNo")
                        .IsUnique()
                        .HasDatabaseName("IX_InferenceConclusionFormulas_InferenceId_SubstitutionInferen~1");

                    b.ToTable("InferenceConclusionFormulas");
                });

            modelBuilder.Entity("MathApi.Models.Proof", b =>
                {
                    b.Property<long>("ProofHeadId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProofHeadSerialNo")
                        .HasColumnType("bigint");

                    b.Property<long>("SerialNo")
                        .HasColumnType("bigint");

                    b.Property<long>("ConclusionFormulaId")
                        .HasColumnType("bigint");

                    b.Property<long>("InferenceId")
                        .HasColumnType("bigint");

                    b.Property<long>("NextProofSerialNo")
                        .HasColumnType("bigint");

                    b.HasKey("ProofHeadId", "ProofHeadSerialNo", "SerialNo");

                    b.HasIndex("ConclusionFormulaId")
                        .IsUnique();

                    b.HasIndex("InferenceId")
                        .IsUnique();

                    b.ToTable("Proofs");
                });

            modelBuilder.Entity("MathApi.Models.ProofArgument", b =>
                {
                    b.Property<long>("ProofHeadId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProofHeadSerialNo")
                        .HasColumnType("bigint");

                    b.Property<long>("ProofSerialNo")
                        .HasColumnType("bigint");

                    b.Property<long>("SerialNo")
                        .HasColumnType("bigint");

                    b.Property<long?>("AxiomId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AxiomPropositionSerialNo")
                        .HasColumnType("bigint");

                    b.Property<long>("FormulaId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TheoremAssumptionSerialNo")
                        .HasColumnType("bigint");

                    b.Property<long?>("TheoremAssumptionTheoremId")
                        .HasColumnType("bigint");

                    b.HasKey("ProofHeadId", "ProofHeadSerialNo", "ProofSerialNo", "SerialNo");

                    b.HasIndex("FormulaId");

                    b.HasIndex("AxiomId", "AxiomPropositionSerialNo");

                    b.HasIndex("TheoremAssumptionTheoremId", "TheoremAssumptionSerialNo");

                    b.HasIndex("ProofHeadId", "ProofHeadSerialNo", "SerialNo");

                    b.ToTable("ProofArguments");
                });

            modelBuilder.Entity("MathApi.Models.ProofAssumption", b =>
                {
                    b.Property<long>("ProofHeadId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProofHeadSerialNo")
                        .HasColumnType("bigint");

                    b.Property<long>("ProofSerialNo")
                        .HasColumnType("bigint");

                    b.Property<long>("SerialNo")
                        .HasColumnType("bigint");

                    b.Property<long?>("DissolutedProofSerialNo")
                        .HasColumnType("bigint");

                    b.Property<long>("FormulaId")
                        .HasColumnType("bigint");

                    b.HasKey("ProofHeadId", "ProofHeadSerialNo", "ProofSerialNo", "SerialNo");

                    b.HasIndex("FormulaId");

                    b.HasIndex("ProofHeadId", "ProofHeadSerialNo", "SerialNo");

                    b.ToTable("ProofAssumptions");
                });

            modelBuilder.Entity("MathApi.Models.ProofHead", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("SerialNo")
                        .HasColumnType("bigint");

                    b.Property<long>("TheoremId")
                        .HasColumnType("bigint");

                    b.HasKey("Id", "SerialNo");

                    b.HasIndex("TheoremId");

                    b.ToTable("ProofHeads");
                });

            modelBuilder.Entity("MathApi.Models.Symbol", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int?>("Arity")
                        .HasColumnType("int");

                    b.Property<long?>("ArityFormulaTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Character")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Meaning")
                        .HasColumnType("longtext");

                    b.Property<long>("SymbolTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ArityFormulaTypeId");

                    b.HasIndex("SymbolTypeId");

                    b.HasIndex("Character", "SymbolTypeId")
                        .IsUnique();

                    b.ToTable("Symbols");
                });

            modelBuilder.Entity("MathApi.Models.SymbolType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("FormulaTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("FormulaTypeId");

                    b.ToTable("SymbolTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            FormulaTypeId = 1L,
                            Name = "free variable"
                        },
                        new
                        {
                            Id = 2L,
                            FormulaTypeId = 1L,
                            Name = "bound variable"
                        },
                        new
                        {
                            Id = 3L,
                            FormulaTypeId = 2L,
                            Name = "proposition variable"
                        },
                        new
                        {
                            Id = 4L,
                            FormulaTypeId = 1L,
                            Name = "constant"
                        },
                        new
                        {
                            Id = 5L,
                            FormulaTypeId = 1L,
                            Name = "function"
                        },
                        new
                        {
                            Id = 6L,
                            FormulaTypeId = 2L,
                            Name = "predicate"
                        },
                        new
                        {
                            Id = 7L,
                            FormulaTypeId = 2L,
                            Name = "logic"
                        },
                        new
                        {
                            Id = 8L,
                            FormulaTypeId = 1L,
                            Name = "term quantifier"
                        },
                        new
                        {
                            Id = 9L,
                            FormulaTypeId = 2L,
                            Name = "proposition quantifier"
                        });
                });

            modelBuilder.Entity("MathApi.Models.Theorem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<bool>("IsProved")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Theorems");
                });

            modelBuilder.Entity("MathApi.Models.TheoremAssumption", b =>
                {
                    b.Property<long>("TheoremId")
                        .HasColumnType("bigint");

                    b.Property<long>("SerialNo")
                        .HasColumnType("bigint");

                    b.Property<long>("FormulaId")
                        .HasColumnType("bigint");

                    b.HasKey("TheoremId", "SerialNo");

                    b.HasIndex("FormulaId");

                    b.ToTable("TheoremAssumption");
                });

            modelBuilder.Entity("MathApi.Models.TheoremConclusion", b =>
                {
                    b.Property<long>("TheoremId")
                        .HasColumnType("bigint");

                    b.Property<long>("SerialNo")
                        .HasColumnType("bigint");

                    b.Property<long>("FormulaId")
                        .HasColumnType("bigint");

                    b.HasKey("TheoremId", "SerialNo");

                    b.HasIndex("FormulaId");

                    b.ToTable("TheoremConclusions");
                });

            modelBuilder.Entity("MathApi.Models.AxiomProposition", b =>
                {
                    b.HasOne("MathApi.Models.Axiom", null)
                        .WithMany("AxiomPropositions")
                        .HasForeignKey("AxiomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MathApi.Models.Formula", "Formula")
                        .WithMany("AxiomPropositions")
                        .HasForeignKey("FormulaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Formula");
                });

            modelBuilder.Entity("MathApi.Models.FormulaChain", b =>
                {
                    b.HasOne("MathApi.Models.Formula", null)
                        .WithMany("FormulaChains")
                        .HasForeignKey("FormulaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MathApi.Models.FormulaString", "FromFormulaString")
                        .WithOne("FormulaChainAtFrom")
                        .HasForeignKey("MathApi.Models.FormulaChain", "FormulaId", "FromFormulaStringSerialNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MathApi.Models.FormulaString", "ToFormulaString")
                        .WithOne("FormulaChainAtTo")
                        .HasForeignKey("MathApi.Models.FormulaChain", "FormulaId", "ToFormulaStringSerialNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromFormulaString");

                    b.Navigation("ToFormulaString");
                });

            modelBuilder.Entity("MathApi.Models.FormulaString", b =>
                {
                    b.HasOne("MathApi.Models.Formula", null)
                        .WithMany("FormulaStrings")
                        .HasForeignKey("FormulaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MathApi.Models.Symbol", null)
                        .WithMany("FormulaStrings")
                        .HasForeignKey("SymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MathApi.Models.InferenceArgument", b =>
                {
                    b.HasOne("MathApi.Models.InferenceArgumentType", null)
                        .WithMany("InferenceArguments")
                        .HasForeignKey("InferenceArgumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MathApi.Models.Inference", null)
                        .WithMany("InferenceArguments")
                        .HasForeignKey("InferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MathApi.Models.InferenceArgumentConstraint", b =>
                {
                    b.HasOne("MathApi.Models.InferenceArgument", "ConstraintDestinationInferenceArgument")
                        .WithMany("InferenceArgumentConstraints")
                        .HasForeignKey("InferenceId", "ConstraintDestinationInferenceArgumentSerialNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConstraintDestinationInferenceArgument");
                });

            modelBuilder.Entity("MathApi.Models.InferenceAssumption", b =>
                {
                    b.HasOne("MathApi.Models.InferenceAssumptionDissolutionType", "InferenceAssumptionDissolutionType")
                        .WithMany("InferenceAssumptions")
                        .HasForeignKey("InferenceAssumptionDissolutionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MathApi.Models.Inference", "Inference")
                        .WithMany("InferenceAssumptions")
                        .HasForeignKey("InferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inference");

                    b.Navigation("InferenceAssumptionDissolutionType");
                });

            modelBuilder.Entity("MathApi.Models.InferenceAssumptionDissolutableAssumptionFormula", b =>
                {
                    b.HasOne("MathApi.Models.Symbol", null)
                        .WithMany("InferenceAssumptionDissolutableAssumptionFormulas")
                        .HasForeignKey("SymbolId");

                    b.HasOne("MathApi.Models.InferenceArgument", "BoundInferenceArgument")
                        .WithOne("InferenceAssumptionDissolutableAssumptionFormulaToBound")
                        .HasForeignKey("MathApi.Models.InferenceAssumptionDissolutableAssumptionFormula", "InferenceId", "BoundInferenceArgumentSerialNo");

                    b.HasOne("MathApi.Models.InferenceArgument", "InferenceArgument")
                        .WithOne("InferenceAssumptionDissolutableAssumptionFormula")
                        .HasForeignKey("MathApi.Models.InferenceAssumptionDissolutableAssumptionFormula", "InferenceId", "InferenceArgumentSerialNo")
                        .HasConstraintName("FK_InferenceAssumptionDissolutableAssumptionFormula_InferenceA~1");

                    b.HasOne("MathApi.Models.InferenceAssumption", "InferenceAssumption")
                        .WithMany("InferenceAssumptionDissolutableAssumptionFormulas")
                        .HasForeignKey("InferenceId", "InferenceAssumptionSerialNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MathApi.Models.InferenceArgument", "SubstitutionInferenceArgumentFrom")
                        .WithOne("InferenceAssumptionDissolutableAssumptionFormulaToSubstitutionInferenceArgumentFrom")
                        .HasForeignKey("MathApi.Models.InferenceAssumptionDissolutableAssumptionFormula", "InferenceId", "SubstitutionInferenceArgumentFromSerialNo")
                        .HasConstraintName("FK_InferenceAssumptionDissolutableAssumptionFormula_InferenceA~2");

                    b.HasOne("MathApi.Models.InferenceArgument", "SubstitutionInferenceArgumentTo")
                        .WithOne("InferenceAssumptionDissolutableAssumptionFormulaToSubstitutionInferenceArgumentTo")
                        .HasForeignKey("MathApi.Models.InferenceAssumptionDissolutableAssumptionFormula", "InferenceId", "SubstitutionInferenceArgumentToSerialNo")
                        .HasConstraintName("FK_InferenceAssumptionDissolutableAssumptionFormula_InferenceA~3");

                    b.Navigation("BoundInferenceArgument");

                    b.Navigation("InferenceArgument");

                    b.Navigation("InferenceAssumption");

                    b.Navigation("SubstitutionInferenceArgumentFrom");

                    b.Navigation("SubstitutionInferenceArgumentTo");
                });

            modelBuilder.Entity("MathApi.Models.InferenceAssumptionFormula", b =>
                {
                    b.HasOne("MathApi.Models.Symbol", null)
                        .WithMany("InferenceAssumptionFormulas")
                        .HasForeignKey("SymbolId");

                    b.HasOne("MathApi.Models.InferenceArgument", "BoundInferenceArgument")
                        .WithOne("InferenceAssumptionFormulaToBound")
                        .HasForeignKey("MathApi.Models.InferenceAssumptionFormula", "InferenceId", "BoundInferenceArgumentSerialNo");

                    b.HasOne("MathApi.Models.InferenceArgument", "InferenceArgument")
                        .WithOne("InferenceAssumptionFormula")
                        .HasForeignKey("MathApi.Models.InferenceAssumptionFormula", "InferenceId", "InferenceArgumentSerialNo");

                    b.HasOne("MathApi.Models.InferenceAssumption", "InferenceAssumption")
                        .WithMany("InferenceAssumptionFormulas")
                        .HasForeignKey("InferenceId", "InferenceAssumptionSerialNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MathApi.Models.InferenceArgument", "SubstitutionInferenceArgumentFrom")
                        .WithOne("InferenceAssumptionFormulaToSubstitutionInferenceArgumentFrom")
                        .HasForeignKey("MathApi.Models.InferenceAssumptionFormula", "InferenceId", "SubstitutionInferenceArgumentFromSerialNo");

                    b.HasOne("MathApi.Models.InferenceArgument", "SubstitutionInferenceArgumentTo")
                        .WithOne("InferenceAssumptionFormulaToSubstitutionInferenceArgumentTo")
                        .HasForeignKey("MathApi.Models.InferenceAssumptionFormula", "InferenceId", "SubstitutionInferenceArgumentToSerialNo")
                        .HasConstraintName("FK_InferenceAssumptionFormulas_InferenceArguments_InferenceId_~1");

                    b.Navigation("BoundInferenceArgument");

                    b.Navigation("InferenceArgument");

                    b.Navigation("InferenceAssumption");

                    b.Navigation("SubstitutionInferenceArgumentFrom");

                    b.Navigation("SubstitutionInferenceArgumentTo");
                });

            modelBuilder.Entity("MathApi.Models.InferenceConclusionFormula", b =>
                {
                    b.HasOne("MathApi.Models.Inference", null)
                        .WithMany("InferenceConclusionFormulas")
                        .HasForeignKey("InferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MathApi.Models.Symbol", null)
                        .WithMany("InferenceConclusionFormulas")
                        .HasForeignKey("SymbolId");

                    b.HasOne("MathApi.Models.InferenceArgument", "BoundInferenceArgument")
                        .WithOne("InferenceConclusionFormulaToBound")
                        .HasForeignKey("MathApi.Models.InferenceConclusionFormula", "InferenceId", "BoundInferenceArgumentSerialNo");

                    b.HasOne("MathApi.Models.InferenceArgument", "InferenceArgument")
                        .WithOne("InferenceConclusionFormula")
                        .HasForeignKey("MathApi.Models.InferenceConclusionFormula", "InferenceId", "InferenceArgumentSerialNo");

                    b.HasOne("MathApi.Models.InferenceArgument", "SubstitutionInferenceArgumentFrom")
                        .WithOne("InferenceConclusionFormulaToSubstitutionInferenceArgumentFrom")
                        .HasForeignKey("MathApi.Models.InferenceConclusionFormula", "InferenceId", "SubstitutionInferenceArgumentFromSerialNo");

                    b.HasOne("MathApi.Models.InferenceArgument", "SubstitutionInferenceArgumentTo")
                        .WithOne("InferenceConclusionFormulaToSubstitutionInferenceArgumentTo")
                        .HasForeignKey("MathApi.Models.InferenceConclusionFormula", "InferenceId", "SubstitutionInferenceArgumentToSerialNo")
                        .HasConstraintName("FK_InferenceConclusionFormulas_InferenceArguments_InferenceId_~1");

                    b.Navigation("BoundInferenceArgument");

                    b.Navigation("InferenceArgument");

                    b.Navigation("SubstitutionInferenceArgumentFrom");

                    b.Navigation("SubstitutionInferenceArgumentTo");
                });

            modelBuilder.Entity("MathApi.Models.Proof", b =>
                {
                    b.HasOne("MathApi.Models.Formula", "ConclusionFormula")
                        .WithOne("Proof")
                        .HasForeignKey("MathApi.Models.Proof", "ConclusionFormulaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MathApi.Models.Inference", "Inference")
                        .WithOne("Proof")
                        .HasForeignKey("MathApi.Models.Proof", "InferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MathApi.Models.ProofHead", null)
                        .WithMany("Proofs")
                        .HasForeignKey("ProofHeadId", "ProofHeadSerialNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConclusionFormula");

                    b.Navigation("Inference");
                });

            modelBuilder.Entity("MathApi.Models.ProofArgument", b =>
                {
                    b.HasOne("MathApi.Models.Formula", null)
                        .WithMany("ProofArguments")
                        .HasForeignKey("FormulaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MathApi.Models.AxiomProposition", "AxiomProposition")
                        .WithMany("ProofArguments")
                        .HasForeignKey("AxiomId", "AxiomPropositionSerialNo");

                    b.HasOne("MathApi.Models.TheoremAssumption", null)
                        .WithMany("ProofArguments")
                        .HasForeignKey("TheoremAssumptionTheoremId", "TheoremAssumptionSerialNo");

                    b.HasOne("MathApi.Models.Proof", null)
                        .WithMany("ProofArguments")
                        .HasForeignKey("ProofHeadId", "ProofHeadSerialNo", "SerialNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AxiomProposition");
                });

            modelBuilder.Entity("MathApi.Models.ProofAssumption", b =>
                {
                    b.HasOne("MathApi.Models.Formula", null)
                        .WithMany("ProofAssumptions")
                        .HasForeignKey("FormulaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MathApi.Models.Proof", null)
                        .WithMany("ProofAssumptions")
                        .HasForeignKey("ProofHeadId", "ProofHeadSerialNo", "SerialNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MathApi.Models.ProofHead", b =>
                {
                    b.HasOne("MathApi.Models.Theorem", null)
                        .WithMany("ProofHeads")
                        .HasForeignKey("TheoremId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MathApi.Models.Symbol", b =>
                {
                    b.HasOne("MathApi.Models.FormulaType", "ArityFormulaType")
                        .WithMany("Symbols")
                        .HasForeignKey("ArityFormulaTypeId");

                    b.HasOne("MathApi.Models.SymbolType", null)
                        .WithMany("Symbols")
                        .HasForeignKey("SymbolTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArityFormulaType");
                });

            modelBuilder.Entity("MathApi.Models.SymbolType", b =>
                {
                    b.HasOne("MathApi.Models.FormulaType", null)
                        .WithMany("SymbolTypes")
                        .HasForeignKey("FormulaTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MathApi.Models.TheoremAssumption", b =>
                {
                    b.HasOne("MathApi.Models.Formula", null)
                        .WithMany("TheoremAssumptions")
                        .HasForeignKey("FormulaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MathApi.Models.Theorem", null)
                        .WithMany("TheoremAssumptions")
                        .HasForeignKey("TheoremId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MathApi.Models.TheoremConclusion", b =>
                {
                    b.HasOne("MathApi.Models.Formula", null)
                        .WithMany("TheoremConclusions")
                        .HasForeignKey("FormulaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MathApi.Models.Theorem", null)
                        .WithMany("TheoremConclusions")
                        .HasForeignKey("TheoremId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MathApi.Models.Axiom", b =>
                {
                    b.Navigation("AxiomPropositions");
                });

            modelBuilder.Entity("MathApi.Models.AxiomProposition", b =>
                {
                    b.Navigation("ProofArguments");
                });

            modelBuilder.Entity("MathApi.Models.Formula", b =>
                {
                    b.Navigation("AxiomPropositions");

                    b.Navigation("FormulaChains");

                    b.Navigation("FormulaStrings");

                    b.Navigation("Proof");

                    b.Navigation("ProofArguments");

                    b.Navigation("ProofAssumptions");

                    b.Navigation("TheoremAssumptions");

                    b.Navigation("TheoremConclusions");
                });

            modelBuilder.Entity("MathApi.Models.FormulaString", b =>
                {
                    b.Navigation("FormulaChainAtFrom");

                    b.Navigation("FormulaChainAtTo");
                });

            modelBuilder.Entity("MathApi.Models.FormulaType", b =>
                {
                    b.Navigation("SymbolTypes");

                    b.Navigation("Symbols");
                });

            modelBuilder.Entity("MathApi.Models.Inference", b =>
                {
                    b.Navigation("InferenceArguments");

                    b.Navigation("InferenceAssumptions");

                    b.Navigation("InferenceConclusionFormulas");

                    b.Navigation("Proof");
                });

            modelBuilder.Entity("MathApi.Models.InferenceArgument", b =>
                {
                    b.Navigation("InferenceArgumentConstraints");

                    b.Navigation("InferenceAssumptionDissolutableAssumptionFormula");

                    b.Navigation("InferenceAssumptionDissolutableAssumptionFormulaToBound");

                    b.Navigation("InferenceAssumptionDissolutableAssumptionFormulaToSubstitutionInferenceArgumentFrom");

                    b.Navigation("InferenceAssumptionDissolutableAssumptionFormulaToSubstitutionInferenceArgumentTo");

                    b.Navigation("InferenceAssumptionFormula");

                    b.Navigation("InferenceAssumptionFormulaToBound");

                    b.Navigation("InferenceAssumptionFormulaToSubstitutionInferenceArgumentFrom");

                    b.Navigation("InferenceAssumptionFormulaToSubstitutionInferenceArgumentTo");

                    b.Navigation("InferenceConclusionFormula");

                    b.Navigation("InferenceConclusionFormulaToBound");

                    b.Navigation("InferenceConclusionFormulaToSubstitutionInferenceArgumentFrom");

                    b.Navigation("InferenceConclusionFormulaToSubstitutionInferenceArgumentTo");
                });

            modelBuilder.Entity("MathApi.Models.InferenceArgumentType", b =>
                {
                    b.Navigation("InferenceArguments");
                });

            modelBuilder.Entity("MathApi.Models.InferenceAssumption", b =>
                {
                    b.Navigation("InferenceAssumptionDissolutableAssumptionFormulas");

                    b.Navigation("InferenceAssumptionFormulas");
                });

            modelBuilder.Entity("MathApi.Models.InferenceAssumptionDissolutionType", b =>
                {
                    b.Navigation("InferenceAssumptions");
                });

            modelBuilder.Entity("MathApi.Models.Proof", b =>
                {
                    b.Navigation("ProofArguments");

                    b.Navigation("ProofAssumptions");
                });

            modelBuilder.Entity("MathApi.Models.ProofHead", b =>
                {
                    b.Navigation("Proofs");
                });

            modelBuilder.Entity("MathApi.Models.Symbol", b =>
                {
                    b.Navigation("FormulaStrings");

                    b.Navigation("InferenceAssumptionDissolutableAssumptionFormulas");

                    b.Navigation("InferenceAssumptionFormulas");

                    b.Navigation("InferenceConclusionFormulas");
                });

            modelBuilder.Entity("MathApi.Models.SymbolType", b =>
                {
                    b.Navigation("Symbols");
                });

            modelBuilder.Entity("MathApi.Models.Theorem", b =>
                {
                    b.Navigation("ProofHeads");

                    b.Navigation("TheoremAssumptions");

                    b.Navigation("TheoremConclusions");
                });

            modelBuilder.Entity("MathApi.Models.TheoremAssumption", b =>
                {
                    b.Navigation("ProofArguments");
                });
#pragma warning restore 612, 618
        }
    }
}
